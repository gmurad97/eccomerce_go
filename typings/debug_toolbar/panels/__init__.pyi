"""
This type stub file was generated by pyright.
"""

from django.core.handlers.asgi import ASGIRequest
from django.template.loader import render_to_string
from debug_toolbar import settings as dt_settings
from debug_toolbar.utils import get_name_from_obj

class Panel:
    """
    Base class for panels.
    """
    is_async = ...
    def __init__(self, toolbar, get_response) -> None:
        ...
    
    @property
    def panel_id(self): # -> str:
        ...
    
    @property
    def enabled(self) -> bool:
        ...
    
    @property
    def nav_title(self):
        """
        Title shown in the side bar. Defaults to :attr:`title`.
        """
        ...
    
    @property
    def nav_subtitle(self): # -> Literal['']:
        """
        Subtitle shown in the side bar. Defaults to the empty string.
        """
        ...
    
    @property
    def has_content(self): # -> Literal[True]:
        """
        ``True`` if the panel can be displayed in full screen, ``False`` if
        it's only shown in the side bar. Defaults to ``True``.
        """
        ...
    
    @property
    def is_historical(self): # -> Literal[True]:
        """
        Panel supports rendering historical values.

        Defaults to :attr:`has_content`.
        """
        ...
    
    @property
    def title(self):
        """
        Title shown in the panel when it's displayed in full screen.

        Mandatory, unless the panel sets :attr:`has_content` to ``False``.
        """
        ...
    
    @property
    def template(self):
        """
        Template used to render :attr:`content`.

        Mandatory, unless the panel sets :attr:`has_content` to ``False`` or
        overrides :attr:`content`.
        """
        ...
    
    @property
    def content(self): # -> SafeString | None:
        """
        Content of the panel when it's displayed in full screen.

        By default this renders the template defined by :attr:`template`.
        Statistics stored with :meth:`record_stats` are available in the
        template's context.
        """
        ...
    
    @property
    def scripts(self): # -> list[Any]:
        """
        Scripts used by the HTML content of the panel when it's displayed.

        When a panel is rendered on the frontend, the ``djdt.panel.render``
        JavaScript event will be dispatched. The scripts can listen for
        this event to support dynamic functionality.
        """
        ...
    
    @classmethod
    def ready(cls): # -> None:
        """
        Perform early initialization for the panel.

        This should only include initialization or instrumentation that needs to
        be done unconditionally for the panel regardless of whether it is
        enabled for a particular request.  It should be idempotent.
        """
        ...
    
    @classmethod
    def get_urls(cls): # -> list[Any]:
        """
        Return URLpatterns, if the panel has its own views.
        """
        ...
    
    def enable_instrumentation(self): # -> None:
        """
        Enable instrumentation to gather data for this panel.

        This usually means monkey-patching (!) or registering signal
        receivers. Any instrumentation with a non-negligible effect on
        performance should be installed by this method rather than at import
        time.

        Unless the toolbar or this panel is disabled, this method will be
        called early in ``DebugToolbarMiddleware``. It should be idempotent.

        Add the ``aenable_instrumentation``  method to a panel subclass
        to support async logic for instrumentation.
        """
        ...
    
    def disable_instrumentation(self): # -> None:
        """
        Disable instrumentation to gather data for this panel.

        This is the opposite of :meth:`enable_instrumentation`.

        Unless the toolbar or this panel is disabled, this method will be
        called late in the middleware. It should be idempotent.
        """
        ...
    
    def record_stats(self, stats): # -> None:
        """
        Store data gathered by the panel. ``stats`` is a :class:`dict`.

        Each call to ``record_stats`` updates the statistics dictionary.
        """
        ...
    
    def get_stats(self):
        """
        Access data stored by the panel. Returns a :class:`dict`.
        """
        ...
    
    def record_server_timing(self, key, title, value): # -> None:
        """
        Store data gathered by the panel. ``stats`` is a :class:`dict`.

        Each call to ``record_stats`` updates the statistics dictionary.
        """
        ...
    
    def get_server_timing_stats(self):
        """
        Access data stored by the panel. Returns a :class:`dict`.
        """
        ...
    
    def process_request(self, request):
        """
        Like __call__ in Django's middleware.

        Write panel logic related to the request there. Save data with
        :meth:`record_stats`.

        Return the existing response or overwrite it.
        """
        ...
    
    def get_headers(self, request): # -> dict[Any, Any]:
        """
        Get headers the panel needs to set.

        Called after :meth:`process_request
        <debug_toolbar.panels.Panel.generate_stats>` and
        :meth:`process_request<debug_toolbar.panels.Panel.generate_stats>`

        Header values will be appended if multiple panels need to set it.

        By default it sets the Server-Timing header.

        Return dict of headers to be appended.
        """
        ...
    
    def generate_stats(self, request, response): # -> None:
        """
        Write panel logic related to the response there. Post-process data
        gathered while the view executed. Save data with :meth:`record_stats`.

        Called after :meth:`process_request
        <debug_toolbar.panels.Panel.process_request>`.


        Does not return a value.
        """
        ...
    
    def generate_server_timing(self, request, response): # -> None:
        """
        Similar to :meth:`generate_stats
        <debug_toolbar.panels.Panel.generate_stats>`,

        Generate stats for Server Timing https://w3c.github.io/server-timing/

        Does not return a value.
        """
        ...
    
    @classmethod
    def run_checks(cls): # -> list[Any]:
        """
        Check that the integration is configured correctly for the panel.

        This will be called as a part of the Django checks system when the
        application is being setup.

        Return a list of :class:`django.core.checks.CheckMessage` instances.
        """
        ...
    


