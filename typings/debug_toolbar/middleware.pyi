"""
This type stub file was generated by pyright.
"""

from functools import cache

"""
Debug Toolbar middleware
"""
def show_toolbar(request): # -> bool:
    """
    Default function to determine whether to show the toolbar on a given page.
    """
    ...

@cache
def show_toolbar_func_or_path(): # -> Any:
    """
    Fetch the show toolbar callback from settings

    Cached to avoid importing multiple times.
    """
    ...

def get_show_toolbar(async_mode): # -> Callable[..., Any] | Callable[..., Coroutine[Any, Any, Any]] | Any:
    """
    Get the callback function to show the toolbar.

    Will wrap the function with sync_to_async or
    async_to_sync depending on the status of async_mode
    and whether the underlying function is a coroutine.
    """
    ...

class DebugToolbarMiddleware:
    """
    Middleware to set up Debug Toolbar on incoming request and render toolbar
    on outgoing response.
    """
    sync_capable = ...
    async_capable = ...
    def __init__(self, get_response) -> None:
        ...
    
    def __call__(self, request): # -> CoroutineType[Any, Any, Any] | Any:
        ...
    
    async def __acall__(self, request): # -> Any:
        ...
    
    @staticmethod
    def get_headers(request, panels): # -> dict[Any, Any]:
        ...
    


